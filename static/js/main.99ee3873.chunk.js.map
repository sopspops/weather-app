{"version":3,"sources":["components/CitySelector.js","hooks/UseFetch.js","components/WeatherCard.js","components/WeatherList.js","App.js","apis/config.js","reportWebVitals.js","index.js"],"names":["CitySelector","onSearch","useState","city","setCity","Row","Col","xs","className","FormControl","placeholder","onChange","event","target","value","Button","onClick","UseFetch","initialUrl","data","setData","error","setError","isLoading","setIsLoading","url","setUrl","useEffect","fetch","then","response","json","cod","message","catch","WeatherCard","dt","temp_min","temp_max","main","icon","date","Date","Card","Img","variant","src","Body","Title","toLocaleDateString","toLocaleTimeString","WeatherList","weathers","map","weather","App","Container","list","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.99ee3873.chunk.js","sourcesContent":["import { useState } from 'react'\nimport { Row, Col, FormControl, Button } from 'react-bootstrap'\n\nconst CitySelector = ({onSearch}) => {\n    const [city, setCity] = useState('')\n\n    return (\n        <div>\n            <Row>\n                <Col>\n                    <h1>Search Your City</h1>\n                </Col>\n            </Row>\n\n            <Row>\n                <Col xs={4} className='text-center'>\n                    <FormControl placeholder='Enter city'\n                    onChange={(event) => setCity(event.target.value)}\n                    value={city}\n                    />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col>\n                    <Button onClick={() => onSearch(city)}>Check Weather</Button>\n                </Col>\n            </Row>\n        </div>\n    )\n}\n\nexport default CitySelector\n\n\n","import {useState, useEffect} from 'react'\n\nconst UseFetch = (initialUrl) => {\n\n    const[data, setData] = useState(null)\n    const[error, setError] = useState(null)\n    const [isLoading, setIsLoading] = useState(null)\n    const [url, setUrl] = useState(initialUrl)\n\n    useEffect(() => {\n        if(!url) return\n        setIsLoading(true)\n\n        setData(null)\n        setError(null)\n\n        fetch(url)\n        .then((response) => response.json())\n        .then((data) => {\n            setIsLoading(false)\n            if(data.cod >= 400) {\n                setError(data.message)\n                return\n            }\n            setData(data)\n        })\n        .catch((error) => {\n            setIsLoading(false)\n            setError(error)})\n    }, [url])\n\n    return { data, error, isLoading, setUrl }\n}\n\nexport default UseFetch\n","import { Card } from 'react-bootstrap'\n\nconst WeatherCard = ({ dt, temp_min, temp_max, main, icon }) => {\n    const date = new Date(dt);\n    return (\n        <Card>\n            <Card.Img variant=\"top\" src={`http://openweathermap.org/img/wn/${icon}@2x.png`} />\n            <Card.Body>\n                <Card.Title>{main}</Card.Title>\n                <p>\n                    {date.toLocaleDateString()} = {date.toLocaleTimeString()}\n                </p>\n                <p>Min: {temp_min}</p>\n                <p>Max: {temp_max}</p>\n            </Card.Body>\n        </Card>\n    )\n}\n\nexport default WeatherCard\n","import { Col, Row } from 'react-bootstrap'\nimport WeatherCard from './WeatherCard'\n\nconst WeatherList = ({weathers}) => {\n    return (\n        <Row>\n            {weathers.map(({dt, main, weather}) => (\n                <Col key={dt}>\n                    <WeatherCard\n                    temp_max={main.temp_max}\n                    temp_min={main.temp_min}\n                    dt={dt * 1000}\n                    main={weather[0].main}\n                    icon={weather[0].icon}\n                    />\n                </Col>\n            ))}\n        </Row>\n    )\n}\n\nexport default WeatherList\n","import './App.css';\nimport CitySelector from './components/CitySelector'\nimport { Container } from 'react-bootstrap'\nimport UseFetch from './hooks/UseFetch';\nimport { API_KEY, API_BASE_URL } from './apis/config'\nimport WeatherList from './components/WeatherList';\n\nconst App = () => {\n  const { data, error, isLoading, setUrl } = UseFetch()\n  \n  const getContent = () => {\n    if(error) return <h2>Error when fetching: {error}</h2>\n    if(!data && isLoading) return <h2>LOADING...</h2>\n    if(!data) return null\n    return <WeatherList weathers={data.list} />\n  }\n\n  return (\n    <Container className=\"App\">\n      <CitySelector onSearch={(city) => \n      setUrl(`${API_BASE_URL}/data/2.5/forecast?q=${city}&appid=${API_KEY}`)} />\n        {getContent()}\n    </Container>\n  );\n}\n\nexport default App;\n","export const API_KEY = 'abb7c308f96367abc3a32a4a5ccd5b1e'\nexport const API_BASE_URL = 'http://api.openweathermap.org/'\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}